package ca.jrvs.apps.trading.dao;

import ca.jrvs.apps.trading.model.domain.Entity;
import ca.jrvs.apps.trading.model.domain.Quote;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataRetrievalFailureException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.dao.IncorrectResultSizeDataAccessException;
import org.springframework.data.repository.CrudRepository;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;

import java.util.LinkedList;
import java.util.List;
import java.util.Optional;

import static org.springframework.data.jpa.domain.AbstractPersistable_.id;

public abstract class JdbcCrudDao<T extends Entity<Integer>> implements CrudRepository<T,Integer> {
    private static final Logger logger = LoggerFactory.getLogger(JdbcCrudDao.class);

    abstract public JdbcTemplate getJdbcTemplate();

    abstract public SimpleJdbcInsert getSimpleJdbcInsert();

    abstract public String getTableName();

    abstract public String getIDColumnName();

    abstract Class<T> getEntityClass();

    /** Save an entity + update autogenerated integer ID
     * @param entity to be saved
     * @return saved entity
     */
    @Override
    public <S extends T> S save(S entity){
        if(existsById(entity.getID())) {
            if (updateOne(entity) != 1)
                throw new DataRetrievalFailureException("Unable to update entity " + entity.getClass());
        }
        else
            addOne(entity);
        return entity;
    }

    @Override
    public <S extends T> Iterable<S> saveAll(Iterable<S> iterable) {
        iterable.forEach(entity -> save(entity));
        return iterable;
    }

    /**
     * Helper method save one entity
     */
    private <S extends T> void addOne(S entity){
        SqlParameterSource sqlParameterSource = new BeanPropertySqlParameterSource(entity);
        Number newId = getSimpleJdbcInsert().executeAndReturnKey(sqlParameterSource);
        entity.setID(newId.intValue());
    }

    /**
     * Helper method update one entity
     */
    abstract public int updateOne(T entity);

    @Override
    public Optional<T> findById(Integer id){
        Optional<T> entity = Optional.empty();
        String selectSQL = "SELECT * FROM "+getTableName()+" WHERE "+getIDColumnName()+"=?";
        try{
            entity = Optional.ofNullable((T) getJdbcTemplate().queryForObject(selectSQL, BeanPropertyRowMapper.newInstance(getEntityClass()),id));
        } catch(IncorrectResultSizeDataAccessException e){
            logger.debug("Can't find ID: "+id,e);
        }
        return entity;
    }

    @Override
    public boolean existsById(Integer id){
        String selectSQL = "SELECT "+getIDColumnName()+" FROM "+getTableName()+" WHERE "+getIDColumnName()+"=?";
        try{
            getJdbcTemplate().queryForObject(selectSQL, Integer.class,id);
            return true;
        } catch (EmptyResultDataAccessException e){
            return false;
        }
    }

    @Override
    public List<T> findAll(){
        String selectSQL = "SELECT * FROM "+getTableName();
        return getJdbcTemplate().query(selectSQL,BeanPropertyRowMapper.newInstance(getEntityClass()));
    }

    @Override
    public List<T> findAllById(Iterable<Integer> ids){
        List<T> targetList= new LinkedList();
        ids.forEach(id -> {
            targetList.add(findById(id).get());
        });
        return targetList;
    }

    @Override
    public void deleteById(Integer id){
        if (id == null) {
            throw new IllegalArgumentException("ID can't be null");
        }
        String deleteSql = "DELETE FROM " + getTableName() + " WHERE " + getIDColumnName() + " =?";
        getJdbcTemplate().update(deleteSql, id);
    }

    @Override
    public long count(){
        return getJdbcTemplate().queryForObject("SELECT COUNT(*) FROM "+getTableName(), Long.class);
    }

    @Override
    public void deleteAll(){
        getJdbcTemplate().update("DELETE FROM "+getTableName());
    }
}
