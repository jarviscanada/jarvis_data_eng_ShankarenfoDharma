package ca.jrvs.apps.trading.controller;

import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.service.TraderAccountService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Date;

@Api(value = "Trader", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
@Controller
@RequestMapping("/trader")
public class TraderAccountController {
    private TraderAccountService traderAccountService;

    @Autowired
    public TraderAccountController(TraderAccountService traderAccountService){
        this.traderAccountService = traderAccountService;
    }

    @ApiOperation(value = "Create trader and account,", notes = "TraderId and AccountId are autoGenerated by DB. Should not be identical. Assume 1:1 for each.")
    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    @PostMapping(path="/firstname/{firstname}/lastname/{lastname}/dob/{dob}/country/{country}/email/{email}", produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
    public Trader createTrader(@PathVariable String firstname, @PathVariable String lastname, @PathVariable @DateTimeFormat(pattern = "yyyy-mm-dd") Date dob, @PathVariable String country, @PathVariable String email){
        try{
            Trader newTrader = new Trader();
            newTrader.setDob(dob);
            newTrader.setLast_name(lastname);
            newTrader.setEmail(email);
            newTrader.setCountry(country);
            newTrader.setFirst_name(firstname);
            return traderAccountService.createTraderAccount(newTrader);
        }catch(Exception e){
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }

    @ApiOperation(value = "Create trader and account with DTO,", notes = "TraderId and AccountId are autoGenerated by DB. Should not be identical. Assume 1:1 for each.")
    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    @PostMapping(path="/", produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
    public Trader createTrader(@RequestBody Trader trader){
        try{
            return traderAccountService.createTraderAccount(trader);
        }catch(Exception e){
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }

    @ApiOperation(value = "Delete a trader,", notes = "Delete trader if account funds = 0, and no open positions. Deletes related rows in other tables.")
    @ApiResponses(value = {@ApiResponse(code = 400, message = "Unable to delete trader")})
    @DeleteMapping(path = "/traderId/{traderId}")
    @ResponseStatus(HttpStatus.OK)
    public void deleteTrader(@PathVariable Integer traderId){
        try{
            traderAccountService.deleteTraderById(traderId);
        }catch(Exception e){
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }

    @ApiOperation(value = "Deposit fund", notes = "Deposit funds into account associated with trader ID.")
    @ApiResponses(value = {@ApiResponse(code = 400, message = "Unable to deposit due to input"),@ApiResponse(code = 404, message = "trader ID not found")})
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    @PutMapping(path = "/deposit/traderId/{traderId}/amount/{amount}")
    public Account depositFund(@PathVariable Integer traderId, @PathVariable Double amount){
        try{
            return traderAccountService.deposit(traderId,amount);
        }catch(Exception e){
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }

    @ApiOperation(value = "Withdraw fund", notes = "Withdraw funds from account associated with trader ID.")
    @ApiResponses(value = {@ApiResponse(code = 400, message = "Unable to withdraw due to input"),@ApiResponse(code = 404, message = "trader ID not found")})
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    @PutMapping(path = "/withdraw/traderId/{traderId}/amount/{amount}")
    public Account withdrawFund(@PathVariable Integer traderId, @PathVariable Double amount){
        try{
            return traderAccountService.withdraw(traderId,amount);
        }catch(Exception e){
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }
}
